<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.music.board.model.mapper.BoardMapper">

	<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO"/>
		
		<collection 
			property="imageList"
			select="selectImageList"
			column="BOARD_NO"
			javaType="java.util.ArrayList"
			ofType="BoardImg"/>
		
		
		<collection 
			property="commentList"
			select = "selectCommentList"
			column="BOARD_NO"
			javaType="java.util.ArrayList"
			ofType="Comment" />
			
	</resultMap> 

	<!-- 게시판 종류 -->
	<select id="selectBoardTypeList">
		SELECT BOARD_CODE "boardCode", BOARD_NAME "boardName"
		FROM BOARD_TYPE
		ORDER BY BOARD_CODE	
	</select>
	
	<!-- 카테고리 버튼 가져오기 -->		
	<select id="selectCategoryList">
		SELECT CATEGORY_NAME "categoryName", CATEGORY_NO "categoryNo", BOARD_CODE "boardCode"
		FROM CATEGORY
		WHERE BOARD_CODE = #{boardCode}
	</select>
	
	
	<!-- 게시글 수 조회 -->
	<select id="getListCount">
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
	</select>
	
	<!-- 게시글 리스트 부분에 카테고리 가져오기 -->
	<select id="getCategoryName">
		SELECT CATEGORY_NO "categoryNo", CATEGORY_NAME "categoryName"
		FROM CATEGORY
		ORDER BY CATEGORY_NO
	</select>
	

	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList">
		SELECT BOARD_NO, 
			(SELECT CATEGORY_NAME FROM CATEGORY C 
		 	 WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, 
			BOARD_TITLE,
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO
			 AND COMMENT_DEL_FL='N') COMMENT_COUNT, 
			MEMBER_NICKNAME, 
			<![CDATA[
			CASE
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60) || '초 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
				
				ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
			END BOARD_WRITE_DATE
			]]>,
			BOARD_WRITE_DATE, 
			READ_COUNT,
			(SELECT COUNT(*) FROM BOARD_LIKE L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
			
		FROM BOARD B
		JOIN MEMBER USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 특정 카테고리에 맞는 게시글 수 조회 -->
	<select id="getCategoryCount">
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_DEL_FL = 'N'
		AND CATEGORY_NO = #{categoryNo}
	</select>
	
	<!-- 특정 카테고리의 게시글 -->
	<select id="selectCategoryBoardList">
		SELECT BOARD_NO, 
			(SELECT CATEGORY_NAME FROM CATEGORY C 
		 	 WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, 
			BOARD_TITLE,
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO
			 AND COMMENT_DEL_FL='N') COMMENT_COUNT, 
			MEMBER_NICKNAME, 
			<![CDATA[
			CASE
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60) || '초 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
				
				ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
			END BOARD_WRITE_DATE
			]]>,
			BOARD_WRITE_DATE, 
			READ_COUNT,
			(SELECT COUNT(*) FROM BOARD_LIKE L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
			
		FROM BOARD B
		JOIN MEMBER USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND CATEGORY_NO = #{categoryNo}
		ORDER BY BOARD_NO DESC
	</select>
	
	
	<!-- 게시글 상세 조회 -->
	<select id="selectOne" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_CODE, READ_COUNT,
			MEMBER_NO, MEMBER_NICKNAME,
			
			TO_CHAR(BOARD_WRITE_DATE, 'YYYY"."MM"."DD HH24":"MI') BOARD_WRITE_DATE,
			TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"."MM"."DD HH24":"MI') BOARD_UPDATE_DATE,
			
			(SELECT CATEGORY_NAME FROM "CATEGORY" C
		 	 WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, 
			
			(SELECT COUNT(*) FROM "BOARD_LIKE"
			 WHERE BOARD_NO = #{boardNo}) LIKE_COUNT,
			 
			(SELECT COUNT(*) FROM "BOARD_LIKE"
			 WHERE MEMBER_NO = #{memberNo} 
			 AND BOARD_NO = #{boardNo}) LIKE_CHECK,
			 
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO
			 AND COMMENT_DEL_FL='N') COMMENT_COUNT 
			 
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND BOARD_NO = #{boardNo}
	</select>
	
	<!-- 좋아요 취소 -->
	<delete id="deleteBoardLike">
		DELETE FROM "BOARD_LIKE" 
		WHERE MEMBER_NO = #{memberNo} 
		AND BOARD_NO = #{boardNo}
	</delete>
	

	<!-- 조회수 증가 -->
	<update id="updateReadCount">
		UPDATE "BOARD" SET
		READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 조회수 조회 -->
	<select id="selectReadCount">
		SELECT READ_COUNT
		FROM "BOARD"
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	
	<!-- 좋아요 하기 -->
	<insert id="addBoardLike">
		INSERT INTO "BOARD_LIKE" 
		VALUES(#{memberNo}, #{boardNo})
	</insert>
	
	<!-- 좋아요 개수 -->
	<select id="selectLikeCount" resultType="_int">
		SELECT COUNT(*)
		FROM "BOARD_LIKE"
		WHERE BOARD_NO = #{boardNo}
	</select>

  
  
  	<!-- 댓글 조회 -->
	<select id="selectCommentList" resultType="Comment">
		SELECT LEVEL, C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
			    TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
			    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL
			 FROM "COMMENT"
			 JOIN MEMBER USING(MEMBER_NO)
			 WHERE BOARD_NO = #{boardNo}) C
		 WHERE COMMENT_DEL_FL = 'N'
		 OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
						 WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
						 AND COMMENT_DEL_FL = 'N')
		 START WITH PARENT_COMMENT_NO IS NULL
		 CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
		 ORDER SIBLINGS BY COMMENT_NO
	</select>
	
	<!-- 상세 조회한 게시글의 이미지 목록 조회 -->
	<select id="selectImageList" resultType="boardImg">
		SELECT *
		FROM "BOARD_IMG"
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
	</select>
	

	<select id="selectMiniList">
		SELECT (SELECT CATEGORY_NAME FROM "CATEGORY" C
		 	 WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, BOARD_TITLE,
		 	 BOARD_CODE, BOARD_NO
		FROM "BOARD" B
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		ORDER BY BOARD_NO DESC
	</select>

	
	<!-- 게시글 조회 -->
 	<select id="getSearchCount">
		SELECT COUNT(*)
		FROM "BOARD"
		JOIN "MEMBER" USING(MEMBER_NO)
	
		WHERE BOARD_DEL_FL = 'N'
	
		AND (BOARD_TITLE LIKE '%' || #{keyword} || '%'
		OR BOARD_CONTENT LIKE '%' || #{keyword} || '%'
		OR MEMBER_NICKNAME LIKE '%' || #{keyword} || '%')

	</select>
	

	<!-- 검색 결과 목록 조회 -->
 	<select id="searchList">
		SELECT BOARD_NO, BOARD_CODE,
			(SELECT CATEGORY_NAME FROM CATEGORY C 
		 	 WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, 
			BOARD_TITLE,
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO
			 AND COMMENT_DEL_FL='N') COMMENT_COUNT, 
			MEMBER_NICKNAME, 
			<![CDATA[
			CASE
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60) || '초 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
				
				WHEN SYSDATE - BOARD_WRITE_DATE < 1
				THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
				
				ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
			END BOARD_WRITE_DATE
			]]>
		,
		BOARD_WRITE_DATE,
		READ_COUNT,
		(SELECT COUNT(*) FROM BOARD_LIKE L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
	
		FROM BOARD B
		JOIN MEMBER USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND (BOARD_TITLE LIKE '%' || #{keyword} || '%'
		OR BOARD_CONTENT LIKE '%' || #{keyword} || '%'
		OR MEMBER_NICKNAME LIKE '%' || #{keyword} || '%')
		ORDER BY BOARD_NO DESC
	</select>
	
	
	<select id="selectHotBoard">
		SELECT DISTINCT BOARD_NAME, 
			(SELECT CATEGORY_NAME FROM "CATEGORY" C WHERE C.CATEGORY_NO = B.CATEGORY_NO) CATEGORY_NAME, BOARD_TITLE, MEMBER_NICKNAME, 
			(SELECT COUNT(*) FROM BOARD_LIKE L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT, BOARD_CODE, BOARD_NO
		FROM BOARD B
		JOIN "BOARD_TYPE" USING(BOARD_CODE)
		JOIN "CATEGORY" USING(BOARD_CODE)
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		ORDER BY LIKE_COUNT DESC
	</select>

  
</mapper>
